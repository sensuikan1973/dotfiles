#!/usr/bin/env zsh
# shellcheck disable=SC1091

set -euxo pipefail

# shellcheck disable=SC2168
local -A opthash
# See: https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module
zparseopts -D -F -A opthash -- -clean branch

branch="main"
if [[ -n "${opthash[(i)-branch]}" ]]; then
  branch="${opthash[-branch]}"
fi

cd "$HOME/dotfiles"
git remote update --prune
git checkout "$branch"
git branch --set-upstream-to="origin/$branch" "$branch"
git pull

source "$HOME/dotfiles/setup.zsh"

# rbenv
# https://github.com/rbenv/rbenv#using-package-managers
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash

# nodenv
# https://github.com/nodenv/nodenv#homebrew-on-macos
curl -fsSL https://github.com/nodenv/nodenv-installer/raw/master/bin/nodenv-doctor | bash

if command -v flutter &> /dev/null; then
  flutter upgrade
fi

if command -v gcloud &> /dev/null; then
  gcloud components update --quiet
fi

# https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html
if [[ -z "${opthash[(i)--clean]}" ]]; then
  exit
fi

echo "also run cleaning"

if command -v docker &> /dev/null; then
  # if docker daemon is running, execute pruning.
  if docker stats --no-stream; then
    docker system prune --force --all --volumes
  else
    echo "docker daemon is not running. so, pruning is not executed."
  fi
fi
